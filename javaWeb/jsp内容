一、指令元素：
<%@  %>包围的：page/include/taglib；
<%@　page 属性1＝值　属性2＝值 … %>
<%@ include file="文件名称" %> 只能包含静态文件
<%@ taglib uri=" URIToTagLibrary " prefix="tagPrefix" %>

二、脚本元素：
声明(declaration)：<%! int count = 0; %>
小脚本(scriptles)：<% count++; %>
表达式(expression)：<%= count%>

三、动作元素：
<jsp: >包围的：
<jsp:useBean> <jsp:setProperty> <jsp:getProperty>
<jsp:include> <jsp:forward> <jsp:param> <jsp:plugin> <jsp:params> <jsp:fallback>
<jsp:root> <jsp:declaration> <jsp:scriptlet> <jsp:expression> <jsp:text> <jsp:output>
<jsp:attribute> <jsp:body> <jsp:element>
<jsp:invoke> <jsp:dobody>


四、注释：
<!--  -->
<%--  --> 	


五、范围：
application
session
request
page


六、九大内置对象：
request,response,session,application,page,pageContext,out,exception,config

七、乱码 （为了避免每页设置编码，建议使用过滤器对所有jsp进行编码处理。）
<%@ page language="java" pageEncoding="UTF-8"%> jsp文件的存储格式，根据这个编码格式保存文件和编译。
<%@ page contentType="text/html;charset=UTF-8"%> 解码格式，要与上面一致
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
	控制浏览器的解码方式。如果前面的解码都一致并且无误的话，这个编码格式没有关系。
	同时它还有一个重要的作用，规定了使用post方式提交表单的时候使用什么编码传入参数。
	
post方法请求乱码的处理是，新页面开始处使用：request.setCharacterEncoding("UTF-8");

get方法：1.可以修改服务器配置文件中的编码为：setting.xml文件的connector节点加URIEncoding="UTF-8" 
或者 2.request.getParameter("type").getBytes("iso-8859-1"), "UTF-8"); 在接收type参数时进行编码转换；
或者 3.对url进行编码：原页面使用js的type=encodeURI(type)方法对type值编码，
		新页面再使用java的type=URLDecoder.decode(type,"UTF-8")对type值解码。

		
八、一个JSP页面对应一个Servlet类，每个Servlet类有三个方法：
　　init方法：初始化JSP/Servlet的方法。
　　destory方法：销毁JSP/Servlet的方法。
　　service方法：对用户请求产生响应的方法。
　　request对象和response对象是service方法的形参，
application对象，page对象，out对象，pageContext对象，session对象都是service的方法中生成的实例。



	