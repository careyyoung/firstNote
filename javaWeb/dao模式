1、DAO设计模式，包括5个重要部分。分别为数据库连接类、VO类、DAO接口、DAO实现类及DAO工厂类。
	DAO各部分详解：
（1）、数据库连接类; database connection.
      数据库连接类的主要功能是连接数据库并获得连接对象，以及关闭数据库。
（2）、VO类：一个javabean，该类主要由属性、setter/getter方法组成，属性和表字段对应，每个类对象表示表的一条记录。
      VO类是一个包含属性和表中字段完全对应的类，并在该类中提供setter和getter方法来设置并获取该类中的属性。
（3）、DAO接口：主要定义操作的接口，如增删改查等
      DAO接口中定义了所有的用户操作，如添加记录、删除记录及查询记录等。不过因为是借口，所以仅仅是定义，需要子类实现。
（4）、DAO实现类：impl，dao类实现类实现具体的操作
      DAO实现类实现了DAO接口，并实现了接口中定义的所有方法。
（5）、DAO工厂类：通过工厂类获得一个dao的实例化对象。
	  使用DAO工厂类，可以比较方便地对代码进行管理，而且可以很好地解决后期修改的问题，
	通过该DAO工厂类的一个静态方法来获取DAO实现类实例。
	这时如果要替换DAO实现类，只需要修改该Dao工厂类中的方法代码，而不必邀修改所有的操作数据库代码。
2、使用DAO完成数据库操作：
（1）、添加记录：
（2）、更新记录：
（3）、删除记录：
（4）、查询记录：


大概思路：
   1、先处理VO。写入相关参数的get,set方法。
   2、再处理DAO。用一个很清楚的思路，把要处理的方法，比方说，连接数据库、插入数据库、删除数据库等方法，写进这个接口。
		以便在类中对其进行实现。在这里，接口中的抽象方法，可以在以后要用到时，直接在往里加，所以我觉得它的扩展性很好。
   3、第三就是写DAOFactory，DAO工厂。DAO工厂的好处就是可以在页面里，直接用Factroy来调用每一个实例子类的各个方法。
		实现业务逻辑与数据库资源的分离。这里说明一下，没有这个Factory，jsp和javabean之间的耦合比较紧密。这是它的缺点。
		而在DAO中加入Factory后，就实现了jsp与javabean的解耦合。使用简单工厂模式，返回数据库存取的接口类型，
		通过其getInstance()方法获得数据库存取的实际实现类，这样在使用数据库存储对象时，只需通过factory对象获得实例即可。 
   3、就是对每个接口进行具体实现了。实现每个接口中的抽象方法。
   4、再写jsp页面。当在用到哪个方法时，直接用一个<jsp:useBean class="" id="" >来调用就行了。
   
目录结构：
持久层：
entiy包中，写vo类，即javabean；类名：xxx.java(xxx表示数据库中的表名)；--也有把entiy包称作为domain包的。
dao包中，写dao接口，方法包括：增删改查等；类名：I-xxx-Dao.java(I表接口，xxx表vo，Dao表dao包)；
daoImpl包中，写dao接口的实现类，实现dao接口中的方法；类名：xxx-Dao-Impl.java(xxx表vo，Dao-Impl表daoImpl包)；

业务层：
service包，业务层里面的类

展示层：
使用servlet类处理控制逻辑类
使用jsp处理页面展示













